// This file is auto-generated by @hey-api/openapi-ts

export type AdminCreateRequest = {
    username: string;
    email: string;
    password: string;
    name?: (string | null);
    phone?: (string | null);
    role?: AdminRole;
};

export type AdminResponse = {
    _id: string;
    username: string;
    name?: (string | null);
    email: string;
    profile_img_url?: (string | null);
    profile_img_public_id?: (string | null);
    role: AdminRole;
    phone?: (string | null);
    created_at: string;
    updated_at: string;
};

export type AdminRole = 'ADMIN' | 'ORDER_MANAGER' | 'PRODUCT_MANAGER';

export type AdminRoleUpdateRequest = {
    role: AdminRole;
};

export type AdminUpdateRequest = {
    username?: (string | null);
    email?: (string | null);
    password?: (string | null);
    name?: (string | null);
    phone?: (string | null);
};

export type Body_admin_admin_login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_admin_update_admin_profile_details = {
    profile_details: AdminUpdateRequest;
    current_password: string;
};

export type Body_admin_update_admin_profile_image_route = {
    file: (Blob | File);
};

export type Body_auth_login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_profile_update_contact_info = {
    contact_info: UpdateContactInfoRequest;
    current_password: string;
};

export type Body_profile_update_profile_details = {
    profile_details: UpdateProfileRequest;
    current_password: string;
};

export type Body_profile_update_profile_image_route = {
    file: (Blob | File);
};

/**
 * Create brand request model
 */
export type BrandCreateRequest = {
    title: string;
};

/**
 * Brand Response model
 */
export type BrandResponse = {
    id: string;
    title: string;
    created_at: string;
    updated_at: string;
};

/**
 * Create Category request model
 */
export type CategoryCreateRequest = {
    title: string;
};

/**
 * Category response model
 */
export type CategoryResponse = {
    id: string;
    title: string;
    updated_at: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type SortBy = 'title' | 'date';

export type SortOrder = 'desc' | 'asc';

export type SuccessMessage = {
    message?: string;
};

export type Token = {
    access_token: string;
    token_type: string;
};

/**
 * Contact info update request model
 */
export type UpdateContactInfoRequest = {
    /**
     * Phone number with 10 digits or including country code (e.g., +1234567890)
     */
    phone?: (string | null);
    /**
     * Residential address
     */
    address?: (string | null);
};

/**
 * User profile update request
 */
export type UpdateProfileRequest = {
    /**
     * Username must be 3-30 characters long and can only contain letters, numbers, and underscores.
     */
    username?: (string | null);
    /**
     * A valid email address is required.
     */
    email?: (string | null);
    /**
     * Name must be between 1 and 50 characters.
     */
    name?: (string | null);
    password?: (string | null);
};

/**
 * Create user request model
 */
export type UserCreateRequest = {
    /**
     * Username must be 3-30 characters long and can only contain letters, numbers, and underscores.
     */
    username: string;
    /**
     * A valid email address is required.
     */
    email: string;
    /**
     * Password must be between 8 and 128 characters.
     */
    password: string;
    /**
     * Name must be between 1 and 50 characters.
     */
    name?: (string | null);
    /**
     * Address can be up to 255 characters long.
     */
    address?: (string | null);
    /**
     * Phone number must be in E.164 format (e.g., +1234567890).
     */
    phone?: (string | null);
};

/**
 * User Response to client
 */
export type UserResponse = {
    _id: string;
    username: string;
    name?: (string | null);
    email: string;
    profile_img_url?: (string | null);
    profile_img_public_id?: (string | null);
    address?: (string | null);
    phone?: (string | null);
    google_id?: (string | null);
    created_at: string;
    updated_at: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AuthCreateNewUserData = {
    body: UserCreateRequest;
};

export type AuthCreateNewUserResponse = (UserResponse);

export type AuthCreateNewUserError = (HTTPValidationError);

export type AuthLoginData = {
    body: Body_auth_login;
};

export type AuthLoginResponse = (Token);

export type AuthLoginError = (HTTPValidationError);

export type AuthGoogleCallbackResponse = (unknown);

export type AuthGoogleCallbackError = unknown;

export type AuthLogoutResponse = (unknown);

export type AuthLogoutError = unknown;

export type AuthLogoutAllResponse = (unknown);

export type AuthLogoutAllError = unknown;

export type AuthCheckAuthResponse = (unknown);

export type AuthCheckAuthError = unknown;

export type AuthRefreshTokenRouteResponse = (Token);

export type AuthRefreshTokenRouteError = unknown;

export type ProfileGetProfileDetailsResponse = (UserResponse);

export type ProfileGetProfileDetailsError = unknown;

export type ProfileUpdateProfileDetailsData = {
    body: Body_profile_update_profile_details;
};

export type ProfileUpdateProfileDetailsResponse = (UserResponse);

export type ProfileUpdateProfileDetailsError = (HTTPValidationError);

export type ProfileUpdateContactInfoData = {
    body: Body_profile_update_contact_info;
};

export type ProfileUpdateContactInfoResponse = (UserResponse);

export type ProfileUpdateContactInfoError = (HTTPValidationError);

export type ProfileUpdateProfileImageRouteData = {
    body: Body_profile_update_profile_image_route;
};

export type ProfileUpdateProfileImageRouteResponse = (UserResponse);

export type ProfileUpdateProfileImageRouteError = (HTTPValidationError);

export type BrandGetAllBrandsData = {
    query?: {
        /**
         * Number of records to return
         */
        limit?: number;
        /**
         * Search term for brand title
         */
        search?: (string | null);
        /**
         * Number of records to skip
         */
        skip?: number;
        /**
         * Field to sort by (date or title)
         */
        sort_by?: SortBy;
        /**
         * Sort order (asc or desc)
         */
        sort_order?: SortOrder;
    };
};

export type BrandGetAllBrandsResponse = (Array<BrandResponse>);

export type BrandGetAllBrandsError = (HTTPValidationError);

export type CategoryGetAllCategoriesData = {
    query?: {
        limit?: number;
        search?: (string | null);
        skip?: number;
        sort_by?: SortBy;
        sort_order?: SortOrder;
    };
};

export type CategoryGetAllCategoriesResponse = (Array<CategoryResponse>);

export type CategoryGetAllCategoriesError = (HTTPValidationError);

export type AdminAdminGetResponse = (unknown);

export type AdminAdminGetError = unknown;

export type AdminCreateNewAdminData = {
    body: AdminCreateRequest;
};

export type AdminCreateNewAdminResponse = (AdminResponse);

export type AdminCreateNewAdminError = (HTTPValidationError);

export type AdminAdminLoginData = {
    body: Body_admin_admin_login;
};

export type AdminAdminLoginResponse = (Token);

export type AdminAdminLoginError = (HTTPValidationError);

export type AdminAdminLogoutResponse = (unknown);

export type AdminAdminLogoutError = unknown;

export type AdminAdminLogoutAllResponse = (unknown);

export type AdminAdminLogoutAllError = unknown;

export type AdminProtectedResponse = (unknown);

export type AdminProtectedError = unknown;

export type AdminAdminRefreshTokenRouteResponse = (Token);

export type AdminAdminRefreshTokenRouteError = unknown;

export type AdminGetAdminProfileDetailsResponse = (AdminResponse);

export type AdminGetAdminProfileDetailsError = unknown;

export type AdminUpdateAdminProfileDetailsData = {
    body: Body_admin_update_admin_profile_details;
};

export type AdminUpdateAdminProfileDetailsResponse = (AdminResponse);

export type AdminUpdateAdminProfileDetailsError = (HTTPValidationError);

export type AdminUpdateAdminRoleRouteData = {
    body: AdminRoleUpdateRequest;
    path: {
        admin_id: string;
    };
};

export type AdminUpdateAdminRoleRouteResponse = (AdminResponse);

export type AdminUpdateAdminRoleRouteError = (HTTPValidationError);

export type AdminUpdateAdminProfileImageRouteData = {
    body: Body_admin_update_admin_profile_image_route;
};

export type AdminUpdateAdminProfileImageRouteResponse = (AdminResponse);

export type AdminUpdateAdminProfileImageRouteError = (HTTPValidationError);

export type AdminGetAllBrandsData = {
    query?: {
        limit?: number;
        search?: (string | null);
        skip?: number;
        sort_by?: SortBy;
        sort_order?: SortOrder;
    };
};

export type AdminGetAllBrandsResponse = (Array<BrandResponse>);

export type AdminGetAllBrandsError = (HTTPValidationError);

export type AdminBrandCreateData = {
    body: BrandCreateRequest;
};

export type AdminBrandCreateResponse = (BrandResponse);

export type AdminBrandCreateError = (HTTPValidationError);

export type AdminBrandUpdateData = {
    body: BrandCreateRequest;
    path: {
        brand_id: string;
    };
};

export type AdminBrandUpdateResponse = (BrandResponse);

export type AdminBrandUpdateError = (HTTPValidationError);

export type AdminBrandDeleteData = {
    path: {
        brand_id: string;
    };
};

export type AdminBrandDeleteResponse = (unknown);

export type AdminBrandDeleteError = (HTTPValidationError);

export type AdminGetAllCategoriesData = {
    query?: {
        limit?: number;
        search?: (string | null);
        skip?: number;
        sort_by?: SortBy;
        sort_order?: SortOrder;
    };
};

export type AdminGetAllCategoriesResponse = (Array<CategoryResponse>);

export type AdminGetAllCategoriesError = (HTTPValidationError);

export type AdminCategoryCreateData = {
    body: CategoryCreateRequest;
};

export type AdminCategoryCreateResponse = (CategoryResponse);

export type AdminCategoryCreateError = (HTTPValidationError);

export type AdminCategoryUpdateData = {
    body: CategoryCreateRequest;
    path: {
        category_id: string;
    };
};

export type AdminCategoryUpdateResponse = (CategoryResponse);

export type AdminCategoryUpdateError = (HTTPValidationError);

export type AdminCategoryDeleteData = {
    path: {
        category_id: string;
    };
};

export type AdminCategoryDeleteResponse = (SuccessMessage);

export type AdminCategoryDeleteError = (HTTPValidationError);